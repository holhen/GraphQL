{"version":3,"sources":["queries/queries.js","components/BookDetails.js","components/BookList.js","components/AddBook.js","App.js","index.js"],"names":["getBooksQuery","gql","getAuthorsQuery","addBookMutation","getBookQuery","BookDetails","book","this","props","data","name","genre","author","className","books","map","item","key","id","displayBookDetails","Component","graphql","options","variables","bookId","BookList","state","selected","loading","onClick","e","setState","displayBooks","AddBook","authorId","disabled","authors","value","preventDefault","refetchQueries","query","onSubmit","submitForm","bind","type","onChange","target","displayAuthors","compose","client","ApolloClient","uri","App","ReactDOM","render","document","getElementById"],"mappings":"yrCAEA,IAAMA,EAAgBC,YAAH,KASbC,EAAkBD,YAAH,KASfE,EAAkBF,YAAH,KASfG,EAAeH,YAAH,KCzBZI,E,6LACmB,IACVC,EAAQC,KAAKC,MAAMC,KAAnBH,KACP,OAAGA,EAEK,6BACI,4BAAKA,EAAKI,MACV,2BAAIJ,EAAKK,OACT,2BAAIL,EAAKM,OAAOF,MAChB,wDACA,wBAAIG,UAAU,eAEVP,EAAKM,OAAOE,MAAMC,IAAI,SAAAC,GAClB,OAAO,wBAAIC,IAAKD,EAAKE,IAAKF,EAAKN,UAQ/C,mD,+BAIJ,OACI,yBAAKQ,GAAG,gBACHX,KAAKY,0B,GA3BIC,aAiCXC,cAAQjB,EAAc,CACjCkB,QAAS,SAACd,GACN,MAAO,CACHe,UAAW,CACPL,GAAIV,EAAMgB,WAJXH,CAQZhB,GCxCGoB,E,YACF,WAAYjB,GAAO,IAAD,8BACd,4CAAMA,KACDkB,MAAQ,CACTC,SAAU,MAHA,E,4EAMH,IAAD,OACNlB,EAAOF,KAAKC,MAAMC,KACtB,OAAGA,EAAKmB,QACG,iDAEJnB,EAAKK,MAAMC,IAAI,SAAAT,GAClB,OACI,wBAAIW,IAAKX,EAAKY,GAAIW,QAAU,SAAAC,GAAM,EAAKC,SAAS,CAACJ,SAAUrB,EAAKY,OAAQZ,EAAKI,U,+BAKrF,OACI,6BACI,wBAAIQ,GAAG,aACFX,KAAKyB,gBAEV,kBAAC,EAAD,CAAaR,OAAUjB,KAAKmB,MAAMC,gB,GAxB3BP,aA6BRC,cAAQrB,EAARqB,CAAuBI,G,QC3BhCQ,E,YACF,WAAYzB,GAAQ,IAAD,8BACf,4CAAMA,KACDkB,MAAQ,CACThB,KAAM,GACNC,MAAO,GACPuB,SAAU,IALC,E,8EASf,IAAIzB,EAAOF,KAAKC,MAAMN,gBACtB,OAAGO,EAAKmB,QACI,4BAAQO,UAAQ,GAAhB,sBAEL1B,EAAK2B,QAAQrB,IAAI,SAAAH,GACpB,OAAO,4BAAQK,IAAKL,EAAOM,GAAImB,MAAOzB,EAAOM,IAAKN,EAAOF,U,iCAGtDoB,GACPA,EAAEQ,iBACF/B,KAAKC,MAAML,gBAAgB,CACvBoB,UAAW,CACPb,KAAMH,KAAKmB,MAAMhB,KACjBC,MAAOJ,KAAKmB,MAAMf,MAClBuB,SAAU3B,KAAKmB,MAAMQ,UAEzBK,eAAgB,CAAC,CAACC,MAAOxC,Q,+BAGxB,IAAD,OACJ,OACG,0BAAMkB,GAAG,WAAWuB,SAAUlC,KAAKmC,WAAWC,KAAKpC,OAC9C,yBAAKM,UAAU,SACX,4CACA,2BAAO+B,KAAK,OAAOC,SAAU,SAAAf,GAAC,OAAI,EAAKC,SAAS,CAACrB,KAAMoB,EAAEgB,OAAOT,YAGpE,yBAAKxB,UAAU,SACX,yCACA,2BAAO+B,KAAK,OAAOC,SAAU,SAAAf,GAAC,OAAI,EAAKC,SAAS,CAACpB,MAAOmB,EAAEgB,OAAOT,YAGrE,yBAAKxB,UAAU,SACX,0CACA,4BAAQgC,SAAU,SAAAf,GAAC,OAAI,EAAKC,SAAS,CAACG,SAAUJ,EAAEgB,OAAOT,UACrD,iDACC9B,KAAKwC,mBAId,0C,GAlDM3B,aAwDP4B,cACX3B,YAAQnB,EAAiB,CAACQ,KAAM,oBAChCW,YAAQlB,EAAiB,CAACO,KAAM,oBAFrBsC,CAGbf,G,OC3DIgB,EAAS,IAAIC,IAAa,CAC9BC,IAAK,kCAiBQC,E,iLAZX,OACE,kBAAC,IAAD,CAAgBH,OAAQA,GACtB,yBAAK/B,GAAG,QACN,4CACA,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GAPQE,aCNlBiC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.2d817eaa.chunk.js","sourcesContent":["import {gql} from \"apollo-boost\"\r\n\r\nconst getBooksQuery = gql`\r\n    {\r\n        books{\r\n            name\r\n            id\r\n        }\r\n    }\r\n`\r\n\r\nconst getAuthorsQuery = gql`\r\n    {\r\n        authors{\r\n            name\r\n            id\r\n        }\r\n    }\r\n`\r\n\r\nconst addBookMutation = gql`\r\n    mutation($name: String!, $genre: String!, $authorId: ID!) {\r\n        addBook(name: $name, genre: $genre, authorId: $authorId) {\r\n            name\r\n            id\r\n        }\r\n    }\r\n`\r\n\r\nconst getBookQuery = gql`\r\n    query($id: ID){\r\n        book(id: $id){\r\n            id\r\n            name\r\n            genre\r\n            author{\r\n                id\r\n                name\r\n                age\r\n                books{\r\n                    name\r\n                    id\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport {getAuthorsQuery, getBooksQuery, addBookMutation, getBookQuery}","import React, {Component} from 'react';\r\nimport {graphql} from \"react-apollo\"\r\nimport {getBookQuery} from \"../queries/queries\"\r\n\r\nclass BookDetails extends Component {\r\n    displayBookDetails(){\r\n        const {book} = this.props.data\r\n        if(book){\r\n            return(\r\n                <div>\r\n                    <h2>{book.name}</h2>\r\n                    <p>{book.genre}</p>\r\n                    <p>{book.author.name}</p>\r\n                    <p>All books by this author:</p>\r\n                    <ul className=\"other-books\">\r\n                    {\r\n                        book.author.books.map(item => {\r\n                            return <li key={item.id}>{item.name}</li>\r\n                        })\r\n                    }\r\n                    </ul>\r\n                </div>\r\n            )\r\n        }\r\n        return (\r\n            <div>No book selected</div>\r\n        )\r\n    }\r\n    render(){\r\n        return (\r\n            <div id=\"book-details\">\r\n                {this.displayBookDetails()}\r\n            </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default graphql(getBookQuery, {\r\n    options: (props) => {\r\n        return {\r\n            variables: {\r\n                id: props.bookId\r\n            }\r\n        }\r\n    } \r\n})(BookDetails)","import React, {Component} from 'react';\r\nimport {graphql} from \"react-apollo\"\r\nimport {getBooksQuery} from \"../queries/queries\"\r\nimport BookDetails from './BookDetails';\r\n\r\nclass BookList extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            selected: null\r\n        }\r\n    }\r\n    displayBooks(){\r\n        var data = this.props.data\r\n        if(data.loading) {\r\n            return(<div>Loading books...</div>)\r\n        }\r\n        return data.books.map(book => {\r\n            return (\r\n                <li key={book.id} onClick={ e => {this.setState({selected: book.id})}}>{book.name}</li>\r\n            )\r\n        })\r\n    }\r\n    render(){\r\n        return (\r\n            <div>\r\n                <ul id=\"book-list\">\r\n                    {this.displayBooks()}\r\n                </ul>\r\n                <BookDetails bookId = {this.state.selected}/>\r\n            </div>\r\n            );\r\n    }\r\n}\r\nexport default graphql(getBooksQuery)(BookList);","import React, {Component} from 'react'\r\nimport {graphql} from \"react-apollo\"\r\nimport {compose} from \"recompose\"\r\nimport {getAuthorsQuery, addBookMutation, getBooksQuery} from \"../queries/queries\"\r\n\r\n\r\n\r\nclass AddBook extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            name: \"\",\r\n            genre: \"\",\r\n            authorId: \"\"\r\n        }\r\n    }\r\n    displayAuthors() {\r\n        var data = this.props.getAuthorsQuery\r\n        if(data.loading) {\r\n            return (<option disabled>Loading authors...</option>)\r\n        }\r\n        return data.authors.map(author => {\r\n            return(<option key={author.id} value={author.id}>{author.name}</option>)\r\n        })\r\n    }\r\n    submitForm(e) {\r\n        e.preventDefault()\r\n        this.props.addBookMutation({\r\n            variables: {\r\n                name: this.state.name,\r\n                genre: this.state.genre,\r\n                authorId: this.state.authorId\r\n            },\r\n            refetchQueries: [{query: getBooksQuery}]\r\n        })\r\n    }\r\n    render(){\r\n        return (\r\n           <form id=\"add-book\" onSubmit={this.submitForm.bind(this)}>\r\n                <div className=\"field\">\r\n                    <label>BookName:</label>\r\n                    <input type=\"text\" onChange={e => this.setState({name: e.target.value})}/>\r\n                </div>\r\n\r\n                <div className=\"field\">\r\n                    <label>Genre:</label>\r\n                    <input type=\"text\" onChange={e => this.setState({genre: e.target.value})}/>\r\n                </div>\r\n\r\n                <div className=\"field\">\r\n                    <label>Author:</label>\r\n                    <select onChange={e => this.setState({authorId: e.target.value})}>\r\n                        <option>Select author</option>\r\n                        {this.displayAuthors()}\r\n                    </select>\r\n                </div>\r\n\r\n                <button>+</button>\r\n           </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    graphql(getAuthorsQuery, {name: \"getAuthorsQuery\"}),\r\n    graphql(addBookMutation, {name: \"addBookMutation\"})\r\n)(AddBook);","import React, {Component} from 'react';\nimport BookList from \"./components/BookList\"\nimport AddBook from \"./components/AddBook\"\nimport ApolloClient from \"apollo-boost\"\nimport {ApolloProvider} from \"react-apollo\"\n\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/graphql',\n})\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <div id=\"main\">\n          <h1>Reading List</h1>\n          <BookList />\n          <AddBook />\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}